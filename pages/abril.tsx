import WriteOn from '@/components/WriteOn';
import { isWebGLSupported } from '@/utils';
import { Transition } from '@headlessui/react';
import dynamic from 'next/dynamic';
import { FC, useEffect, useState } from 'react';

const AbrilBG = dynamic(() => import('../components/AbrilBG'), { ssr: false });

export default function Home() {
  const [title, setTitle] = useState('');
  const [textIndex, setTextIndex] = useState(-7);
  const text = "Curate"

  useEffect(() => {
    const timer = setTimeout(() => {
      if (textIndex < text.length) {
        if (textIndex >= 0) setTitle(title + text[textIndex]); // Add the next character to the title
        setTextIndex(textIndex + 1); // Increment the index
      }
    }, 420); //delay


    return () => {
      clearTimeout(timer);
    }
  }, [textIndex]);

  return (
    <div className='bg-stone-100 h-screen flex flex-wrap w-full'>
      <AbrilBG className='h-[33%] lg:h-full relative w-full lg:w-[33%]' />

      <div
        className="flex flex-col items-center justify-evenly w-full lg:w-[66%]"
      >
        <div className='z-[1]'>

          <Wait time="delay-[0.6s]">
            <h1
              className='font-abril text-center text-[5rem] md:text-[8rem] text-stone-300 relative lg:right-[10vw] top-[3rem]'
            // style={{ textShadow: '4px 4px 0px rgba(48, 45, 43, 0.5)'}}
            >Create</h1>
          </Wait>

          <div className='h-[10rem] flex flex-col justify-center align-center'>
            <WriteOn paths={CuratePaths} fillClass={() => "fill-stone-800 stroke-stone-800"}/>
          </div>
          <Wait time="delay-[1.6s]">
            <h1
              className='font-abril text-center text-[5rem] md:text-[8rem] text-stone-300 relative lg:left-[10vw] bottom-[3rem] z-[-1]'
            // style={{ textShadow: '4px 4px 0px rgba(48, 45, 43, 0.5)' }}
            >Collect</h1>
          </Wait>
        </div>

        <div
          className='
            hidden lg:grid
            w-full grid-cols-1 lg:grid-cols-[1fr_auto_1fr_auto_1fr] 
            gap-3 items-center relative bottom-[5rem]
            text-2xl text-center text-stone-800
          '
          // style={{ textShadow: '2px 2px 4px black' }}
        >
          <Wait time="delay-[0.6s]">Create</Wait>

          <Wait time="delay-[2.6s]">|</Wait>

          <Wait time="delay-[2.6s]">
            <Transition
              appear={true}
              show={true}
              enter={`delay-[2.6s] transition duration-1000 ease-out`}
              enterFrom="transform translate-y-5 opacity-0"
              enterTo="transform translate-y-0 opacity-100"
            >
              Everything In Between
            </Transition>
          </Wait>

          <Wait time="delay-[2.6s]">|</Wait>

          <Wait time="delay-[1.6s]">Collect</Wait>
        </div>
      </div>
    </div>
  )
}

const Wait: FC<{ children: JSX.Element | string, time: string }> = ({ children, time }) => (
  <Transition
    appear={true}
    show={true}
    enter={`${time} transition`}
    enterFrom="transform opacity-0"
    enterTo="transform opacity-100"
  >
    {children}
  </Transition>
)

const CuratePaths = [
  "M114.4,38.924C90.013,38.924 77.82,62.445 77.82,109.488L77.82,128.132C77.82,150.473 81.045,167.977 87.496,180.642C93.947,193.307 103.465,199.64 116.052,199.64C133.359,199.64 149.249,182.805 163.724,149.136L167.972,149.136L166.32,201.764L163.724,201.764C162.78,200.033 161.915,198.814 161.128,198.106C160.341,197.398 159.201,197.044 157.706,197.044C156.211,197.044 150.508,198.263 140.596,200.702C130.684,203.141 120.615,204.36 110.388,204.36C84.743,204.36 64.879,197.437 50.798,183.592C36.717,169.747 29.676,148.939 29.676,121.17C29.676,93.401 37.031,71.964 51.742,56.86C66.453,41.756 86.237,34.204 111.096,34.204C120.693,34.204 130.094,35.423 139.298,37.862C148.502,40.301 153.891,41.52 155.464,41.52C157.037,41.52 158.217,41.166 159.004,40.458C159.791,39.75 160.656,38.531 161.6,36.8L164.196,36.8L166.084,88.012L161.836,88.012C154.756,72.121 147.479,59.967 140.006,51.55C132.533,43.133 123.997,38.924 114.4,38.924Z",
  "M318.54,202L264.732,202L262.136,184.772C259.619,191.065 255.882,195.903 250.926,199.286C245.97,202.669 238.615,204.36 228.86,204.36C204.473,204.36 192.28,191.223 192.28,164.948L192.28,93.912L179.064,93.912L179.064,89.664L236.176,89.664L236.176,170.612C236.176,180.052 236.845,186.267 238.182,189.256C239.519,192.245 242.194,193.74 246.206,193.74C250.218,193.74 253.797,191.301 256.944,186.424C260.091,181.547 261.664,174.781 261.664,166.128L261.664,93.912L250.808,93.912L250.808,89.664L305.56,89.664L305.56,197.752L318.54,197.752L318.54,202Z",
  "M402.084,96.272C396.263,96.272 391.149,100.048 386.744,107.6C382.339,115.152 380.136,124.12 380.136,134.504L380.136,197.752L396.892,197.752L396.892,202L323.26,202L323.26,197.752L336.24,197.752L336.24,93.912L323.26,93.912L323.26,89.664L380.136,89.664L380.136,112.32C382.181,104.296 386.115,98.121 391.936,93.794C397.757,89.467 404.365,87.304 411.76,87.304C419.155,87.304 425.173,89.389 429.814,93.558C434.455,97.727 436.776,103.627 436.776,111.258C436.776,118.889 435.045,124.749 431.584,128.84C428.123,132.931 422.813,134.976 415.654,134.976C408.495,134.976 403.225,132.616 399.842,127.896C396.459,123.176 396.027,116.647 398.544,108.308L407.04,108.308C410.973,100.284 409.321,96.272 402.084,96.272Z",
  "M493.18,146.54L500.024,146.54L500.024,128.368C500.024,113.421 499.198,103.391 497.546,98.278C495.894,93.165 492.708,90.608 487.988,90.608C485.156,90.608 482.599,91.355 480.318,92.85C478.037,94.345 476.896,96.39 476.896,98.986C476.896,101.582 477.368,104.217 478.312,106.892L484.212,106.892C485.471,110.196 486.1,114.169 486.1,118.81C486.1,123.451 484.133,127.463 480.2,130.846C476.267,134.229 471.311,135.92 465.332,135.92C451.801,135.92 445.036,129.391 445.036,116.332C445.036,96.98 461.477,87.304 494.36,87.304C513.083,87.304 526.023,90.49 533.182,96.862C540.341,103.234 543.92,114.916 543.92,131.908L543.92,179.816C543.92,187.997 546.201,192.088 550.764,192.088C556.113,192.088 559.26,183.985 560.204,167.78L563.744,168.016C563.115,181.861 560.519,191.38 555.956,196.572C551.393,201.764 543.92,204.36 533.536,204.36C514.656,204.36 503.8,198.539 500.968,186.896C498.923,192.875 495.855,197.28 491.764,200.112C487.673,202.944 481.695,204.36 473.828,204.36C450.543,204.36 438.9,194.841 438.9,175.804C438.9,164.633 443.345,156.963 452.234,152.794C461.123,148.625 474.772,146.54 493.18,146.54ZM483.74,175.568C483.74,183.749 484.173,189.02 485.038,191.38C485.903,193.74 487.555,194.92 489.994,194.92C492.433,194.92 494.714,192.914 496.838,188.902C498.962,184.89 500.024,179.344 500.024,172.264L500.024,150.316L498.372,150.316C488.617,150.316 483.74,157.475 483.74,171.792L483.74,175.568Z",
  "M574.364,168.252L574.364,93.912L561.384,93.912L561.384,89.664L574.364,89.664L574.364,59.22L618.26,48.364L618.26,89.664L648.94,89.664L648.94,93.912L618.26,93.912L618.26,173.444C618.26,180.839 619.007,186.267 620.502,189.728C621.997,193.189 625.104,194.92 629.824,194.92C634.544,194.92 638.674,192.56 642.214,187.84C645.754,183.12 648.075,176.669 649.176,168.488L653.188,168.96C651.929,179.816 648.468,188.43 642.804,194.802C637.14,201.174 627.779,204.36 614.72,204.36C601.661,204.36 591.671,201.764 584.748,196.572C577.825,191.38 574.364,181.94 574.364,168.252Z",
  "M717.616,204.36C697.32,204.36 682.098,199.129 671.95,188.666C661.802,178.203 656.728,163.65 656.728,145.006C656.728,126.362 662.431,112.084 673.838,102.172C685.245,92.26 699.759,87.304 717.38,87.304C753.095,87.304 770.244,105.24 768.828,141.112L702.276,141.112L702.276,150.316C702.276,165.735 704.243,177.377 708.176,185.244C712.109,193.111 718.953,197.044 728.708,197.044C746.959,197.044 758.916,187.289 764.58,167.78L768.828,168.488C765.839,179.816 760.45,188.627 752.662,194.92C744.874,201.213 733.192,204.36 717.616,204.36ZM702.512,136.392L726.82,136.392L726.82,124.828C726.82,112.084 726.073,103.391 724.578,98.75C723.083,94.109 720.094,91.788 715.61,91.788C711.126,91.788 707.822,94.266 705.698,99.222C703.574,104.178 702.512,112.713 702.512,124.828L702.512,136.392Z"
]